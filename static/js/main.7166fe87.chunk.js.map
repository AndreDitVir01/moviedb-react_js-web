{"version":3,"sources":["component/Search.js","component/Result.js","component/Results.js","component/Popup.js","App.js","serviceWorker.js","index.js"],"names":["Search","handleInput","search","className","type","placeholder","onChange","onKeyPress","Result","result","openPopup","onClick","imdbID","src","Poster","alt","Title","Results","results","map","key","Popup","selected","closePopup","Year","imdbRating","Plot","App","useState","s","state","setState","e","target","value","prevState","axios","apiurl","then","data","id","apiUrlPopup","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+NAgBeA,MAdf,YAAuC,IAAtBC,EAAqB,EAArBA,YAAaC,EAAQ,EAARA,OAC1B,OACI,6BAASC,UAAU,kBACf,2BACIC,KAAK,OACLC,YAAY,sBACZF,UAAU,YACVG,SAAUL,EACVM,WAAYL,M,gBCCbM,MATf,YAAqC,IAApBC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,UACrB,OACI,yBAAKP,UAAU,SAASQ,QAAS,WAAOD,EAAUD,EAAOG,UACrD,yBAAKC,IAAKJ,EAAOK,OAAQC,IAAKN,EAAOO,QACrC,4BAAKP,EAAOO,SCMTC,MAVf,YAAyC,IAAtBC,EAAqB,EAArBA,QAASR,EAAY,EAAZA,UACxB,OACI,6BAASP,UAAU,WACde,EAAQC,KAAI,SAAAV,GAAM,OACf,kBAAC,EAAD,CAAQW,IAAKX,EAAOG,OAAQH,OAAQA,EAAQC,UAAWA,SCYxDW,MAhBf,YAAwC,IAAvBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,WACvB,OACI,6BAASpB,UAAU,SACf,yBAAKA,UAAU,WACX,4BAAKmB,EAASN,MAAd,IAAqB,8BAAQM,EAASE,OACtC,uBAAGrB,UAAU,UAAb,WAAgCmB,EAASG,YACzC,yBAAKtB,UAAU,QACX,yBAAKU,IAAKS,EAASR,SACvB,2BAAIQ,EAASI,OAEb,4BAAQvB,UAAU,QAAQQ,QAASY,GAAnC,YC4DDI,MAlEf,WAAgB,IAAD,EACaC,mBAAS,CACjCC,EAAG,GACHX,QAAS,GACTI,SAAU,KAJC,mBACNQ,EADM,KACCC,EADD,KA8Cb,OACE,yBAAK5B,UAAU,OACb,gCACE,+CAEF,8BACE,kBAAC,EAAD,CACGF,YAlCU,SAAC+B,GAClB,IAAIH,EAAIG,EAAEC,OAAOC,MAEjBH,GAAS,SAAAI,GACP,OAAO,2BAAKA,GAAZ,IAAuBN,EAAGA,QA+BrB3B,OA9CM,SAAC8B,GACD,UAAVA,EAAEZ,KACHgB,IAAMC,0DAAiBP,EAAMD,GAAGS,MAAK,YAAW,IAC1CpB,EADyC,EAARqB,KAClBvC,OACnB+B,GAAS,SAAAI,GACP,OAAO,2BAAKA,GAAZ,IAAuBjB,QAASA,aA2ClC,kBAAC,EAAD,CACEA,QAASY,EAAMZ,QACfR,UA9BU,SAAC8B,GAGjBJ,IAAMK,8BAAqBD,EADd,oBAC2BF,MAAK,YAAY,IACnD7B,EADkD,EAAT8B,KAG7CR,GAAS,SAAAI,GACP,OAAO,2BAAKA,GAAZ,IAAuBb,SAAUb,aAyBA,oBAAxBqB,EAAMR,SAASN,OAAwB,kBAAC,EAAD,CAAOM,SAAUQ,EAAMR,SAAUC,WApBpE,WACjBQ,GAAS,SAAAI,GACP,OAAO,2BAAKA,GAAZ,IAAuBb,SAAU,cCpCnBoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7166fe87.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Search({handleInput, search}){\r\n    return(\r\n        <section className=\"searchbox-wrap\">\r\n            <input \r\n                type=\"text\" \r\n                placeholder=\"Cari film disini...\" \r\n                className=\"searchbox\"\r\n                onChange={handleInput}\r\n                onKeyPress={search}\r\n            />\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Search","import React from 'react'\r\n\r\nfunction Result({result, openPopup}){\r\n    return(\r\n        <div className=\"result\" onClick={() => {openPopup(result.imdbID)}}>\r\n            <img src={result.Poster} alt={result.Title}/>\r\n            <h3>{result.Title}</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Result","import React from 'react'\r\nimport Result from './Result'\r\nfunction Results({ results, openPopup }){\r\n    return(\r\n        <section className=\"results\">\r\n            {results.map(result => (\r\n                <Result key={result.imdbID} result={result} openPopup={openPopup} />\r\n            ))}\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Results","import React from 'react'\r\n\r\nfunction Popup ({selected, closePopup}){\r\n    return (\r\n        <section className=\"popup\">\r\n            <div className=\"content\">\r\n                <h2>{selected.Title} <span>{ selected.Year }</span></h2>\r\n                <p className=\"rating\">Rating: { selected.imdbRating}</p>\r\n                <div className=\"plot\">\r\n                    <img src={selected.Poster} />\r\n                <p>{selected.Plot}</p>\r\n                </div>\r\n                <button className=\"close\" onClick={closePopup}>Close</button>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Popup","import React, { useState } from 'react'\nimport Search from './component/Search'\nimport axios from 'axios'\nimport Results from './component/Results'\nimport Popup from './component/Popup'\n\nfunction App() {\n  const [state, setState] = useState({\n    s: \"\",\n    results: [],\n    selected: {}\n  });\n  \n  const apiurl = \"https://www.omdbapi.com/?i=tt3896198&apikey=b6c59b5c\";\n  const search = (e) => {\n    if(e.key === \"Enter\"){\n      axios(apiurl + \"&s=\" + state.s).then(({data})=>{\n        let results = data.Search;\n        setState(prevState => {\n          return { ...prevState, results: results}\n        })\n      })\n    }\n  }\n  \n  const handleInput= (e) => {\n    let s = e.target.value;\n\n    setState(prevState => {\n      return { ...prevState, s: s}\n    });\n    \n  }  \n\n  const openPopup = (id) =>{\n    let apiUrlPopup = \"https://www.omdbapi.com/\";\n    let apikey = \"&apikey=b6c59b5c\";\n    axios(apiUrlPopup + \"?i=\"+ id + apikey).then(({data}) =>{\n      let result = data;\n\n      setState(prevState => {\n        return { ...prevState, selected: result }\n      });\n    });\n  }\n\n  const closePopup = () =>{\n    setState(prevState => {\n      return { ...prevState, selected: {}}\n    })\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Movie Database</h1>\n      </header>\n      <main>\n        <Search \n           handleInput={handleInput}\n           search = {search}\n        />\n        <Results \n          results={state.results}\n          openPopup ={openPopup}\n        />\n        {(typeof state.selected.Title != \"undefined\") ? <Popup selected={state.selected} closePopup={closePopup} /> : false}\n      </main>\n    </div>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}